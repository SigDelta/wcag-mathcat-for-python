---

# number-sets are a little messy in that the base was converted to a number-set, so we have to match that (simple) case last
-
   name: pos-neg-number-sets
   tag: number-sets
   match: "*[2][text()='+' or text()='-']"
   replace:
   - test:
      if: "$Verbosity!='Terse'"
      then:
      - t: "" 
   - bookmark: "*[2]/@id"
   - test:
      - if: "*[2][text()='+']"
        then: [t: "dodatnia"]
        else: [t: "ujemna"]
   - bookmark: "*[1]/@id"
   - test:
      - if: "*[1][text()='ℂ']"
        then: [t: liczba zespolona]
      - else_if: "*[1][text()='ℕ']"
        then: [t: liczba naturalna]
      - else_if: "*[1][text()='ℚ']"
        then: [t: liczba wymierna]
      - else_if: "*[1][text()='ℝ']"
        then: [t:  liczba rzeczywista]
      - else_if: "*[1][text()='ℤ']"
        then: [t: liczba całkowita]
        else: [x: "*[1][text()]"]     # shouldn't happen


-
   # should be single digit integer at this point (e.g, R^3)
   name: dimension-number-sets
   tag: number-sets
   match: "count(*)=2"
   replace:
   - bookmark: "*[1]/@id"
   - test:
      - if: "*[1][text()='ℂ']"
        then: [t: "C"]
      - else_if: "*[1][text()='ℕ']"
        then: [t: "N"]
      - else_if: "*[1][text()='ℚ']"
        then: [t: "Q"]
      - else_if: "*[1][text()='ℝ']"
        then: [t:  "R"]
      - else_if: "*[1][text()='ℤ']"
        then: [t: "Z"]
        else: [x: "*[1][text()]"]     # shouldn't happen
   - bookmark: "*[2]/@id"
   - x: "*[2]"

-
   name: simple-number-sets
   tag: number-sets
   match: "count(*)=0"
   replace:
   - bookmark: "@id"
   - test:
      - if: "text()='ℂ'"
        then: [t: zbiór liczb zespolonych]
      - else_if: "text()='ℕ'"
        then: [t: zbiór liczb naturalnych]
      - else_if: "text()='ℚ'"
        then: [t: zbiór liczb wymiernych]
      - else_if: "text()='ℝ'"
        then: [t: zbiór liczb rzeczywistych]
      - else_if: "text()='ℤ'"
        then: [t: zbiór liczby całkowitych]
        else: [x: text()]     # shouldn't happen


-
   name: real-part
   tag: real-part
   match: "."
   replace: 
   - bookmark: "@id"
   - t: część rzeczywista

-
   name: imaginary-part
   tag: imaginary-part
   match: "."
   replace: 
   - bookmark: "@id"
   - t: część urojona


# rules on scripted vertical bars ('evaluated at')
-
   name: evaluated-at-2
   tag: evaluate
   match: "count(*)=2"
   replace: 
   - x: "*[1]"
   - pause: auto
   - t: obliczone na
   - pause: auto
   - x: "*[2]"

-
   name: evaluated-at-3
   tag: evaluate
   match: "count(*)=3"
   replace: 
   - x: "*[1]"
   - pause: auto
   - t: obliczone na
   - pause: auto
   - x: "*[3]"
   - t: "minus to samo wyrażenie obliczone na"
   - x: "*[2]"

-
   name: binomial
   tag: binomial
   match: "."
   replace: 
   - t: dwumian
   - x: "*[1]"
   - t: nad
   - x: "*[2]"

-
   name: permutation
   tag: permutation-symbol
   match: "."
   replace: 
   - x: "*[2]"
   - t: permutacje z
   - x: "*[1]"

-
   name: default-interval
   tag: interval
   match: "."
   replace:
   - test:
      if: "$Verbosity!='Terse'"
      then:
      - t: "" 
   - test:
      if: "*[1][text()='(']"
      then_test:
         if: "*[4][text()=')']"
         then: [t: "otwarty"] 
         else: [t: "otwarty zamknięty"] 
      else_test:
         if: "*[4][text()=')']"
         then: [t: "zamknięty otwarty"] 
         else: [t: "zamknięty"] 
   - t: "przedział" 
   - test:
      if: "$Verbosity!='Terse'"
      then:
      - t: "od"
      - x: "*[2]"
      - t: "do"
      - x: "*[3]"
      else:
      - x: "*[2]"
      - t: "przecinek"
      - x: "*[3]"


-
   name: absolute-value
   tag: absolute-value
   match: "."
   replace: 
   - test: 
      if: "$Verbosity='Terse'"
      then: [t: "wartość bezwzględna"]
      else: [t: "wartość bezwzględna z"]
   - x: "*[1]"
   - test:
         if: "IsNode(*[1], 'leaf') or $Impairment != 'Blindness'"
         then: [pause: short]
         else: [pause: short, t: koniec wartości bezwzględnej, pause: short]

-
   name: negative
   tag: negative
   match: "."
   replace:
      - bookmark: "./@id"
      - t: "ujemne"
      - x: "*[1]"

-
   name: positive
   tag: positive
   match: "."
   replace:
      - bookmark: "./@id"
      - t: "dodatnie"
      - x: "*[1]"
               
-
   name: bigop-both
   tag: large-op
   match: "count(*) = 3"
   replace: 
   - test: 
      if: "$Verbosity!='Terse'"
      then: [t: ""]
   - x: "*[1]"
   - t: od
   - x: "*[2]"
   - t: do
   - x: "*[3]"
   - test:
      if: "following-sibling::*"
      then: [t: z]
  
-
   name: bigop-under
   tag: large-op
   match: "."
   replace: 
   - test: 
      if: "$Verbosity!='Terse'"
      then: [t: ""]
   - x: "*[1]"
   - t: nad
   - x: "*[2]"
   - test:
      if: "following-sibling::*"
      then: [t: z]
  
-
   name: largeop
   tag: mrow
   match: "count(*)=2 and IsLargeOp(*[1])"
   replace: 
    - test: 
       if: "$Verbosity!='Terse'"
       then: [t: ""]
    - x: "*[1]"
    - t: z
    - x: "*[2]"
  
-
   name: limit
   tag: limit
   match: "."
   replace: 
   - test: 
      if: "$Verbosity!='Terse'"
      then: [t: granica przy]
      else: [t: "granica przy"]
   - x: "*[2]"
   - pause: short
  
-
   name: vector
   tag: modified-variable
   match: "*[2][text()='→']"
   replace: 
   - t: "wektor"
   - x: "*[1]"
   
  
-
   name: default
   tag: modified-variable
   match: "."
   replace: 
   - x: "*[1]"
   - x: "*[2]"
   - pause: short

-
   # handles single, double, etc., prime
   name: default
   tag: prime
   match: "."
   replace: 
   - x: "*[1]"
   - x: "*[2]"
   - pause: short

-
   name: sin
   tag: mi
   match: "text()='sin'"
   replace:
      - bookmark: "@id"
      - t: "sinus"
-
   name: cos
   tag: mi
   match: "text()='cos'"
   replace:
      - bookmark: "@id"
      - test: 
         if: "$Verbosity='Terse'"
         then: {t: kosinus}
         else: {t: kosinus}
-
   name: tan
   tag: mi
   match: "text()='tan'"
   replace:
      - bookmark: "@id"
      - test: 
         if: "$Verbosity='Terse'"
         then: {t: tangens}
         else: {t: tangens}
-
   name: sec
   tag: mi
   match: "text()='sec'"
   replace:
      - bookmark: "@id"
      - test: 
         if: "$Verbosity='Terse'"
         then: {t: sekans}
         else: {t: sekans}
-
   name: csc
   tag: mi
   match: "text()='csc'"
   replace:
      - bookmark: "@id"
      - test: 
         if: "$Verbosity='Terse'"
         then: {t: kosekans}
         else: {t: kosekans}
-
   name: cot
   tag: mi
   match: "text()='cot'"
   replace:
      - bookmark: "@id"
      - test: 
         if: "$Verbosity='Terse'"
         then: {t: kotangens}
         else: {t: kotangens}

-
   name: sinh
   tag: mi
   match: "text()='sinh'"
   replace:
      - bookmark: "@id"
      - test: 
         if: "$Verbosity='Terse'"
         then: {t: sinus hiperboliczny}
         else: {t: sinus hiperboliczny}
-
   name: cosh
   tag: mi
   match: "text()='cosh'"
   replace:
      - bookmark: "@id"
      - test: 
         if: "$Verbosity='Terse'"
         then: {t: kosinus hiperboliczny}
         else: {t: kosinus hiperboliczny}
-
   name: tanh
   tag: mi
   match: "text()='tanh'"
   replace:
      - bookmark: "@id"
      - test: 
         if: "$Verbosity='Terse'"
         then: {t: tangens hiperboliczny}
         else: {t: tangens hiperboliczny}
-
   name: sech
   tag: mi
   match: "text()='sech'"
   replace:
      - bookmark: "@id"
      - test: 
         if: "$Verbosity='Terse'"
         then: {t: sekans hiperboliczny}
         else: {t: sekans hiperboliczny}
-
   name: csch
   tag: mi
   match: "text()='csch'"
   replace:
      - bookmark: "@id"
      - test: 
         if: "$Verbosity='Terse'"
         then: {t: cosecans hiperboliczny}
         else: {t: cosecans hiperboliczny}
-
   name: coth
   tag: mi
   match: "text()='coth'"
   replace:
      - bookmark: "@id"
      - test: 
         if: "$Verbosity='Terse'"
         then: {t: cotangens hiperboliczny}
         else: {t: cotangens hiperboliczny}

-  # handle both log and ln
   name: log
   tag: mrow
   variables: [log_is_simple: "IsNode(*[3],'simple')"]
   match:
      - "count(*)=3 and"
      - "*[1][self::m:mi][text()='log' or text()='ln'] and"
      - "*[2][self::m:mo][text()='\u2061']"
   replace:
      - bookmark: "*[1]/@id"
      - test:
         if: "$log_is_simple"
         then_test:
            - if: "*[1][text()='log']"
              then: [t: logarytm]
            - else_if: "$Verbosity='Terse'"
              then: [spell: logarytm naturalny]
              else: [t: logarytm naturalny]
         else:
            - test: 
               if: "$Verbosity!='Terse' and not(log_is_simple)"
               then: {t: ""}
            - test:
               - if: "*[1][text()='log']"
                 then: [t: logarytm]
               - else_if: "$Verbosity='Terse'"
                 then: [spell: logarytm naturalny]
                 else: [t: logarytm naturalny]
            - t: z
            - pause: short
      - x: "*[3]"

-
   name: log-base
   tag: log-base
   match: "."
   replace:
   - bookmark: "@id"
   - test: 
      if: "$Verbosity!='Terse'"
      then: {t: ""}
   - t: podstawa logarytmu
   - x: "*[1]"

-
   # IDEA:  set a variable with the word to saw for the row (e.g., RowLabel = Row/Case/Line/...)
   #   that eliminates the need for the if: else_if: ...
   name: multi-line
   tag: [piecewise, equations, lines]
   match: "."
   replace:
   - x: "count(*)"
   - test:
      - if: "count(*) < 2 and self::m:piecewise"
        then: [t: "przypadek"]
      - else_if: "count(*) > 1 and self::m:piecewise"
        then: [t: "przypadki"]
      - else_if: "count(*) < 2 and self::m:equations"
        then: [t: "równanie"]
      - else_if: "count(*) > 1 and self::m:equations"
        then: [t: "równania"]
      - else_if: "count(*) > 1"
        then: [t: "linie"]
        else: [t: "linia"]
   - pause: short
   - x: "*"

-
  name: default-multiline
  tag: [mtr, mlabeledtr]
  match: "parent::m:piecewise or parent::m:equations or parent::m:lines"
  replace:
   - test:
      - if: "parent::m:piecewise"
        then: [t: "przypadek"]
      - else_if: "parent::m:equations"
        then: [t: "równanie"]
        else: [t: "linia"]
   - x: "count(preceding-sibling::*)+1"
   - test:
      if: .[self::m:mlabeledtr]
      then:
         - t: z etykietą
         - x: "*[1]/*"
   - pause: medium
   - test:
      if: .[self::m:mlabeledtr]
      then: [x: "*[position()>1]"]
      else: {x: "*"}

-
  name: default-multiline
  tag: mtd
  match: "parent::*[parent::m:piecewise or parent::m:equations or parent::m:lines]"
  replace:
   - x: "*"
   - test:
      # short pause after each element; medium pause if last element in a row; long pause for last element in matrix
      - if: count(following-sibling::*) > 0
        then: {pause: short}
      - else_if: count(../following-sibling::*) > 0
        then: {pause: medium}
        else: {pause: long}


# Matrix/Determinant rules
# matrix and determinant are the same other than "matrix"/"determinant" based on the bracketing chars
# the pausing logic is pushed down to the <mtd>
# the rules either speak the <mtr>s (to get "row n") or the <mtd>s. "column n" spoken if $IsColumnSilent is false
-
   name: 1x1-matrix
   tag: [matrix, determinant]
   variables: [IsColumnSilent: true()]
   match: "count(*)=1 and *[self::m:mtr][count(*) = 1]"
   replace:
   - ot: ""
   - t: 1 na 1
   - test:
      if: "self::m:determinant"    # just need to check the first bracket since we know it must be (, [, or |
      then: {t: wyznacznik}
      else: {t: macierz}
   - t: z wartością
   - x: "*[1]/*"

# simpler reading methods for smaller matrices if the entries are simple
-
   name: 2-or-3x1-matrix
   tag: matrix
   variables: [IsColumnSilent: true()]
   match:
   - "$ClearSpeak_Matrix != 'SpeakColNum' and "    # "simple" isn't used for this preference
   - "*[self::m:mtr][count(*) = 1] and "    # one column
   - count(*)<=3 and   # at least two rows
   - IsNode(*/*/*,'simple')   # IsNode() returns true if all the nodes are simple
   replace: 
   - t: ""
   - x: count(*)
   - t: na 1 kolumnę
   - test:
      if: "$ClearSpeak_Matrix = 'Vector' or $ClearSpeak_Matrix = 'EndVector'"
      then: {t: wektor}
      else: {t: macierz}
   - pause: long
   - x: "*/*"
   - test:
      if: "$ClearSpeak_Matrix = 'EndMatrix' or $ClearSpeak_Matrix = 'EndVector'"
      then:
      - t: "koniec"
      - test:
         if: $ClearSpeak_Matrix = 'EndVector'
         then: {t: wektora}
         else: {t: macierzy}

-
   name: default-column-matrix
   tag: matrix
   variables: [IsColumnSilent: true()]
   match: "*[self::m:mtr][count(*) = 1]"
   replace: 
   - t: ""
   - x: "count(*)"
   - t: na 1 kolumnę
   - test:
      if: "$ClearSpeak_Matrix = 'Vector' or $ClearSpeak_Matrix = 'EndVector'"
      then: {t: wektor}
      else: {t: macierz}
   - pause: long
   - x: "*"     # select the rows (mtr)
   - test:
      if: "$ClearSpeak_Matrix = 'EndMatrix' or $ClearSpeak_Matrix = 'EndVector'"
      then: [t: "koniec macierzy"]
 
-
   name: 1x2-or-3-matrix
   tag: matrix
   variables: [IsColumnSilent: "$SpeechStyle = 'ClearSpeak' and $ClearSpeak_Matrix != 'SpeakColNum'"]
   match:
   - "$ClearSpeak_Matrix != 'SpeakColNum' and "    # "simple" isn't used for this preference
   - count(*)=1  and          # one row
   - count(*[1]/*)<=3 and   # at least two cols
   - IsNode(*/*/*,'simple')   # IsNode() returns true if all the nodes are simple
   replace: 
   - t: 1 na
   - x: count(*/*)
   - t: "kolumn"
   - test:
      if: "$ClearSpeak_Matrix = 'Vector' or $ClearSpeak_Matrix = 'EndVector'"
      then: {t: wektor}
      else: {t: macierz}
   - pause: long
   - x: "*/*"
   - test:
      if: "$ClearSpeak_Matrix = 'EndMatrix' or $ClearSpeak_Matrix = 'EndVector'"
      then:
      - t: "koniec"
      - test:
         if: $ClearSpeak_Matrix = 'EndMatrix'
         then: {t: macierzy}
         else: {t: wektora}
 
-
   name: default-row-matrix
   tag: matrix
   variables: [IsColumnSilent: "$SpeechStyle = 'ClearSpeak' and $ClearSpeak_Matrix = 'SilentColNum'"]
   match: "count(*)=1"         # one row
   replace: 
   - t: 1 na
   - x: "count(*/*)"
   - t: "kolumn"
   - test:
      if: "$ClearSpeak_Matrix = 'Vector' or $ClearSpeak_Matrix = 'EndVector'"
      then: {t: wektor}
      else: {t: macierz}
   - pause: long
   - pause: medium
   - x: "*/*"     # select the cols (mtd)
   - test:
      if: "$ClearSpeak_Matrix = 'EndMatrix' or $ClearSpeak_Matrix = 'EndVector'"
      then:
      - t: "koniec"
      - test:
         if: $ClearSpeak_Matrix = 'EndMatrix'
         then: {t: macierzy}
         else: {t: wektora}

-
   name: simple-small-matrix
   tag: [matrix, determinant]
   match:
   - "$ClearSpeak_Matrix != 'SpeakColNum' and "    # "simple" isn't used for this preference
   - (count(*)<=3 and count(*[1]/*)<=3) and       # no bigger than a 3x3 matrix
   - IsNode(*/*/*,'simple')         # IsNode() returns true if all the nodes are simple
   variables: [IsColumnSilent: "$SpeechStyle = 'ClearSpeak' and $ClearSpeak_Matrix != 'SpeakColNum'"]
   replace: 
   - t: ""
   - x: count(*)
   - t: na
   - x: count(*[self::m:mtr][1]/*)
   - test:
      if: "self::m:determinant"
      then: {t: wyznacznik}
      else: {t: macierz}
   - pause: long
   - x: "*"
   - test:
      if: "$ClearSpeak_Matrix = 'EndMatrix' or $ClearSpeak_Matrix = 'EndVector'"
      then:
      - t: koniec
      - test:
         if: "self::m:determinant"
         then: {t: wyznacznika}
         else: {t: macierzy}
 
-
   name: default-matrix
   tag: [matrix, determinant]
   variables: [IsColumnSilent: "$SpeechStyle = 'ClearSpeak' and $ClearSpeak_Matrix = 'SilentColNum'"]
   match: "."
   replace: 
   - t: ""
   - x: "count(*)"
   - t: na
   - x: "count(*[self::m:mtr][1]/*)"
   - test:
      if: "self::m:determinant"
      then: {t: wyznacznik}
      else: {t: macierz}
   - pause: long
   - x: "*"
   - test:
      if: "$ClearSpeak_Matrix = 'EndMatrix' or $ClearSpeak_Matrix = 'EndVector'"
      then:
      - t: koniec
      - test:
         if: "self::m:determinant"
         then: {t: wyznacznika}
         else: {t: macierzy}